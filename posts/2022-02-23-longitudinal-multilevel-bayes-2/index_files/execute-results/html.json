{
  "hash": "0fe5c73f5b25a24192aa433859185833",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Bayesian analysis of longitudinal multilevel data using brms and rethinking - part 2  \ndescription: Part 2 of a tutorial showing how to fit Bayesian models using the `rethinking` package.\nauthor: Andreas Handel\ndate: '2022-02-23'\nlastMod: \"2022-05-02\"\naliases: \n  - ../longitudinal-multilevel-bayesian-analysis-2/\ncategories: \n- R\n- Data Analysis\n- Bayesian\nimage: \"featured.png\"\n---\n\n\n\n\n\n\nThis is part two of a tutorial illustrating how to perform a Bayesian analysis of longitudinal data using a multilevel/hierarchical/mixed-effects setup. In this part, we'll fit the simulated data using the `rethinking` package.\n\nI assume you've read [part 1](/posts/longitudinal-multilevel-bayesian-analysis-1/), otherwise this post won't make much sense. You might even want to open that first part in a separate tab for quick comparison.\n\n# Introduction\n\nIn the previous post, I showed a setup where some continuous outcome data (in our case, virus load) was collected over time for several individuals. Those individuals differed by some characteristic (in our case, dose at which they got infected). I specified several models that are useful for both fitting the data, and creating simulations. We've done the simulating part, now we'll start fitting models to that data.\n\nThe advantage of fitting to simulated data is that we know exactly what model and what parameters produced the data, so we can compare our model estimates to the truth (i.e. the parameter and model settings that were used to generate the data) to see how our models perform. It is always good to do that to get some confidence that your models make sense, before you apply them to real data. For the latter, you don't know what the \"truth\" is, so you have to trust whatever your model tells you.\n\nFitting Bayesian models can take a good bit of time (hours, depending on the settings for the fitting routine). It is generally advisable to place code that takes a while to run into its own `R` script, run that script and then save the results for further processing. This is in fact what I did here. I wrote 2 separate R scripts, one that does the fitting and one that does the exploration of the model fits. The code shown below comes from those 2 scripts. There is some value in re-coding yourself by copying and pasting the code chunks from this tutorial, but if you just want to get all the code from this post you can find it [here](ulamfitmodels.R) and [here](ulamexploremodels.R).\n\n# R Setup\n\nWe'll start with loading needed packages. Make sure these packages are installed. Since `rethinking` uses the [Stan Bayesian modeling engine](https://mc-stan.org/), you need to install it too. It is in my experience mostly seamless, but at times it seems to be tricky. I generally follow the instructions on the [`rethinking` website](https://github.com/rmcelreath/rethinking) and it has so far always worked for me. It might need some fiddling, but you should be able to get them all to work.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary('dplyr') # for data manipulation\nlibrary('ggplot2') # for plotting\nlibrary('cmdstanr') #for model fitting\nlibrary('rethinking') #for model fitting\nlibrary('fs') #for file path\n```\n:::\n\n\n# Data loading\n\nWe'll jump right in and load the data we generated in the previous tutorial. In this example, I'm fitting the data that was generated by model 3 since it shows the most realistic pattern. You can try to fit to the other 2 datasets and see what you find (I'll show an example in [this part of the tutorial](https://www.andreashandel.com/posts/longitudinal-multilevel-bayesian-analysis-4/). It is not necessarily the case that the model that produced a certain dataset is also the one that fits it best.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# adjust as necessary\nsimdatloc <- here::here('posts','2022-02-22-longitudinal-multilevel-bayes-1','simdat.Rds')\nsimdat <- readRDS(simdatloc)\n#using dataset 3 for fitting\n#also removing anything in the dataframe that's not used for fitting\n#makes the ulam/Stan code more robust\nfitdat=list(id=simdat[[3]]$id,\n            outcome = simdat[[3]]$outcome,\n            dose_adj = simdat[[3]]$dose_adj,\n            time = simdat[[3]]$time)\n#pulling out number of observations\nNind = length(unique(simdat$m3$id))\n```\n:::\n\n\n# Fitting with rethinking\n\nWe'll start by fitting the different models we discussed in [part 1](/posts/longitudinal-multilevel-bayesian-analysis-1/) using the `rethinking` package. The main function in that package, which does the fitting using [Stan](https://mc-stan.org/), is `ulam`.\n\nFirst, we'll specify each model, then we'll run them all in a single loop.\n\n## Model 1\n\nThese lines of code specify the full set of equations for our model 1. Note how closely the R code resembles the mathematical notation. That close match between math and code is one of the nice features of `rethinking`/`ulam`. Also note the indexing of the parameters `a0` and `b0` by `id`, which indicates that each individual has their own values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#wide-prior, no-pooling model\n#separate intercept for each individual/id\n#2x(N+1)+1 parameters\nm1 <- alist(\n  # distribution of outcome\n  outcome ~ dnorm(mu, sigma),\n\n  # main equation for time-series trajectory\n  mu <- exp(alpha)*log(time) - exp(beta)*time,\n\n  #equations for alpha and beta\n  alpha <-  a0[id] + a1*dose_adj,\n  beta <-  b0[id] + b1*dose_adj,\n\n  #priors\n  a0[id] ~ dnorm(2,  10),\n  b0[id] ~ dnorm(0.5, 10),\n\n  a1 ~ dnorm(0.3, 1),\n  b1 ~ dnorm(-0.3, 1),\n  sigma ~ cauchy(0,1)\n)\n```\n:::\n\n\nYou might have noticed that I chose some of the values in the priors to be different than the values we used to generate the simulated data. I don't want to make things too easy for the fitting routine 😁. We want to have the fitting routine \"find\" the right answer (parameter estimates). Hopefully, even if we don't start at the right values, we'll end up there.\n\n## Model 2\n\nNow we'll set up model 2 exactly as for model 1 but with some of the priors changed as discussed previously. Specifically, the priors now force the individual-level parameters to be essentially all the same. Note that - as you will see below - this model is not a good model, and if one wanted to not allow the $a_0$ and $b_0$ parameters to have any individual level variation, one should just implement and run the model 2 alternative I describe below. We'll run this model anyway, to just illustration and to see what happens.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#narrow-prior, full-pooling model\n#2x(N+2)+1 parameters\nm2 <- alist(\n  outcome ~ dnorm(mu, sigma),\n  mu <- exp(alpha)*log(time) - exp(beta)*time,\n  alpha <-  a0[id] + a1*dose_adj,\n  beta <-  b0[id] + b1*dose_adj,\n  a0[id] ~ dnorm(mu_a,  0.0001),\n  b0[id] ~ dnorm(mu_b, 0.0001),\n  mu_a ~ dnorm(2, 1),\n  mu_b ~ dnorm(0.5, 1),\n  a1 ~ dnorm(0.3, 1),\n  b1 ~ dnorm(-0.3, 1),\n  sigma ~ cauchy(0,1)\n)\n```\n:::\n\n\n## Model 3\n\nThis is the same as model 1 but with different values for the priors. These priors are somewhat regularizing and more reasonable. As we'll see, the results are similar to those from model 1, but the model runs more efficiently and thus faster.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#regularizing prior, partial-pooling model\nm3 <- alist(\n  outcome ~ dnorm(mu, sigma),\n  mu <- exp(alpha)*log(time) - exp(beta)*time,\n  alpha <-  a0[id] + a1*dose_adj,\n  beta <-  b0[id] + b1*dose_adj,\n  a0[id] ~ dnorm(2,  1),\n  b0[id] ~ dnorm(0.5, 1),\n  a1 ~ dnorm(0.3, 1),\n  b1 ~ dnorm(-0.3, 1),\n  sigma ~ cauchy(0,1)\n)\n```\n:::\n\n\n## Model 4\n\nThis is our adaptive pooling model. For this model, we specify a few extra distributions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#adaptive priors, partial-pooling model\n#2x(N+2)+1 parameters\nm4 <- alist(\n  outcome ~ dnorm(mu, sigma),\n  mu <- exp(alpha)*log(time) - exp(beta)*time,\n  alpha <-  a0[id] + a1*dose_adj,\n  beta <-  b0[id] + b1*dose_adj,\n  a0[id] ~ dnorm(mu_a,  sigma_a),\n  b0[id] ~ dnorm(mu_b, sigma_b),\n  mu_a ~ dnorm(2, 1),\n  mu_b ~ dnorm(0.5, 1),\n  sigma_a ~ cauchy(0, 1),\n  sigma_b ~ cauchy(0, 1),\n  a1 ~ dnorm(0.3, 1),\n  b1 ~ dnorm(-0.3, 1),\n  sigma ~ cauchy(0, 1)\n)\n```\n:::\n\n\n## A few model alternatives\n\nThere are a few model alternatives I also want to consider. The first one is a version of model 2 that gets rid of individual-level parameters and instead has only population-level parameters. I discussed this model in part 1 of the tutorial and called it 2a there. Here is the model definition\n\n### Model 2a\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#full-pooling model, population-level parameters only\n#2+2+1 parameters\nm2a <- alist(\n  outcome ~ dnorm(mu, sigma),\n  mu <- exp(alpha)*log(time) - exp(beta)*time,\n  alpha <-  a0 + a1*dose_adj,\n  beta <-  b0 + b1*dose_adj,\n  a0 ~ dnorm(2,  0.1),\n  b0 ~ dnorm(0.5, 0.1),\n  a1 ~ dnorm(0.3, 1),\n  b1 ~ dnorm(-0.3, 1),\n  sigma ~ cauchy(0,1)\n)\n```\n:::\n\n\nNote that `a0` and `b0` are not indexed by `id` anymore and are now single numbers, instead of $N$ values as before.\n\n### Model 4a\n\nAnother model I want to look at is a variant of model 4. This is in fact the same model as model 4, but written in a different way. A potential problem with model 4 and similar models is that parameters inside parameters can lead to inefficient or unreliable numerical results when running your Monte Carlo routine (in our case, this is Stan-powered Hamilton Monte Carlo). It is possible to rewrite the model such that it is the same model, but it looks different in a way that makes the numerics often run better. It turns out for our example, model 4 above runs ok. But it's a good idea to be aware of the fact that one can re-write models if needed, therefore I decided to include this model alternative here.\n\nThe above model 4 is called a **centered** model and the re-write for model 4a is called a **non-centered** model. The trick is to pull out the parameters from inside the distributions for $a_{0,i}$ and $b_{0,i}$. The non-centered model looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#adaptive priors, partial-pooling model\n#non-centered\nm4a <- alist(\n  outcome ~ dnorm(mu, sigma),\n  mu <- exp(alpha)*log(time) - exp(beta)*time,\n  #rewritten to non-centered\n  alpha <-  mu_a + az[id]*sigma_a + a1*dose_adj,\n  beta  <-  mu_b + bz[id]*sigma_b + b1*dose_adj,\n  #rewritten to non-centered\n  az[id] ~ dnorm(0, 1),\n  bz[id] ~ dnorm(0, 1),\n  mu_a ~ dnorm(2, 1),\n  mu_b ~ dnorm(0.5, 1),\n  sigma_a ~ cauchy(0, 1),\n  sigma_b ~ cauchy(0, 1),\n  a1 ~ dnorm(0.3, 1),\n  b1 ~ dnorm(-0.3, 1),\n  sigma ~ cauchy(0, 1)\n\n  )\n```\n:::\n\n\nAgain, this model is mathematically the same as the original model 4. If this is confusing and doesn't make sense (it sure wouldn't to me if I just saw that for the first time 😁), check the [Statistical Rethinking book](https://xcelab.net/rm/statistical-rethinking/). (And no, I do not get a commission for continuing to point you to the book, and I wish there was a free online version (or a cheap paperback). But it is a great book and if you want to learn this kind of modeling for real, I think it's worth the investment.)\n\n### Model 5\n\nAnother model, which I'm calling model 5 here, is one that does not include the dose effect. That means, parameters $a_1$ and $b_1$ are gone. Otherwise I'm following the setup of model 1. The reason I'm doing this is because on initial fitting of the above models, I could not obtain estimates for the dose parameters I used for the simulation. I noticed strong correlations between posterior distributions of the model parameters. I suspected an issue with non-identifiable parameters (i.e, trying to estimate more parameters than the data supports). To figure out what was going on, I wanted to see how a model without the dose component would perform. It turned out that the main reason things didn't look right was because I had a typo in the code that generated the data, so what I thought was the generating model actually wasn't 🤦. A helpful colleague and reader pointed this out. Once I fixed it, things made more sense. But I figured it's instructive to keep this model anyway.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#no dose effect\n#separate intercept for each individual/id\n#2xN+1 parameters\nm5 <- alist(\n  # distribution of outcome\n  outcome ~ dnorm(mu, sigma),\n\n  # main equation for time-series trajectory\n  mu <- exp(alpha)*log(time) - exp(beta)*time,\n\n  #equations for alpha and beta\n  alpha <-  a0[id],\n  beta <-  b0[id],\n\n  #priors\n  a0[id] ~ dnorm(2,  10),\n  b0[id] ~ dnorm(0.5, 10),\n\n  sigma ~ cauchy(0,1)\n)\n```\n:::\n\n\n## Setting starting values\n\nAny fitting routine needs to start with some parameter values and then from there tries to improve. `Stan` uses a heuristic way of picking some starting values. Often that works, sometimes it fails initially but then the routine fixes itself, and sometimes it fails all the way. In either case, I find it a good idea to specify starting values, even if they are not strictly needed. And it's good to know that this is possible and how to do it, just in case you need it at some point. Setting starting values gives you more control, and you also know exactly what should happen when you look at for instance the traceplots of the chains.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Setting starting values\n#starting values for model 1\nstartm1 = list(a0 = rep(2,Nind), b0 = rep(0.5,Nind), a1 = 0.3 , b1 = -0.3, sigma = 1)\n#starting values for model 2\nstartm2 = list(a0 = rep(2,Nind), b0 = rep(0.5,Nind), mu_a = 2, mu_b = 1, a1 = 0.3 , b1 = -0.3, sigma = 1)\n#starting values for model 3\nstartm3 = startm1\n#starting values for models 4 and 4a\nstartm4 = list(mu_a = 2, sigma_a = 1, mu_b = 1, sigma_b = 1, a1 = 0.3 , b1 = -0.3, sigma = 1)\nstartm4a = startm4\n#starting values for model 2a\nstartm2a = list(a0 = 2, b0 = 0.5, a1 = 0.3, b1 = -0.3, sigma = 1)\n#starting values for model 5\nstartm5 = list(a0 = rep(2,Nind), b0 = rep(0.5,Nind), sigma = 1)\n\n#put different starting values in list\n#need to be in same order as models below\nstartlist = list(startm1,startm2,startm3,startm4,startm2a,startm4,startm5)\n```\n:::\n\n\nNote that we only specify values for the parameters that are directly estimated. Parameters that are built from other parameters (e.g. $\\alpha$ and $\\beta$) are computed and don't need starting values.\n\nFor some more detailed discussion on starting values, see for instance [this post by Solomon Kurz](https://solomonkurz.netlify.app/blog/2021-06-05-don-t-forget-your-inits/). He uses `brms` in his example, but the same idea applies with any package/fitting routine. He also explains that it is a good idea to set different starting values for each chain. I am not sure if/how this could be done with `rethinking`, it seems `ulam` does not support this? But it can be done for `brms` (and I'm doing it there).\n\n## Model fitting\n\nNow that we specified all models, we can loop through all models and fit them. First, some setup before the actual fitting loop.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#general settings for fitting\n#you might want to adjust based on your computer\nwarmup = 3000 \niter = 2000\nmax_td = 15 #tree depth\nadapt_delta = 0.999\nchains = 5\ncores  = chains\nseed = 4321\n# for quick testing, use the settings below\n# results won't make much sense, but can make sure the code runs\n#warmup = 600 #for testing\n#iter = warmup + floor(warmup/2)\n#max_td = 10 #tree depth\n#adapt_delta = 0.99\n\n\n#stick all models into a list\nmodellist = list(m1=m1,m2=m2,m3=m3,m4=m4,m2a=m2a,m4a=m4a,m5=m5)\n# set up a list in which we'll store our results\nfl = vector(mode = \"list\", length = length(modellist))\n\n\n#setting for parameter constraints\nconstraints = list(sigma=\"lower=0\",sigma_a=\"lower=0\",sigma_b=\"lower=0\")\n```\n:::\n\n\nThe first code block defines various settings for the `ulam` function. Look at the help file for details. Then we place all models into a list, set up an empty list for our fit results, and specify the data needed for fitting. The final command enforces some constraints on parameters. For our model, we want Half-Cauchy distributions for all variance parameters to ensure they are positive. Above, I specified them as Cauchy. There is no direct Half-Cauchy implementation. The way one achieves one is to tell `ulam`/`Stan` that the values for those parameters need to be positive. That's what the `constraints` line in the code below does.\n\nLooping over each model and fitting it. In addition to the actual fitting call to `ulam`, I'm also printing a few messages and storing the model name and the time it took to run. That's useful for diagnostic. It's generally a good idea to do short runs/chains until things work, then do a large run to get the actual result. Recording the running time helps decide how long a real run can be and how long it might take.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fitting models\n#loop over all models and fit them using ulam\nfor (n in 1:length(modellist))\n{\n\n  cat('************** \\n')\n  cat('starting model', names(modellist[n]), '\\n')\n\n  tstart=proc.time(); #capture current time\n\n  #run model fit\n  fit <- ulam(flist = modellist[[n]],\n                          data = fitdat,\n                          start=startlist[[n]],\n                          constraints=constraints,\n                          log_lik=TRUE, cmdstan=TRUE,\n                          control=list(adapt_delta=adapt_delta,\n                                       max_treedepth = max_td),\n                          chains=chains, cores = cores,\n                          warmup = warmup, iter = iter,\n                          seed = seed\n  )# end ulam\n\n  # save fit object to list\n  fl[[n]]$fit <- fit\n  \n  #capture time taken for fit\n  tdiff=proc.time()-tstart;\n  runtime_minutes=tdiff[[3]]/60;\n\n  cat('model fit took this many minutes:', runtime_minutes, '\\n')\n  cat('************** \\n')\n\n  #add some more things to the fit object\n  fl[[n]]$runtime = runtime_minutes\n  fl[[n]]$model = names(modellist)[n]\n\n} #end fitting of all models\n\n# saving the list of results so we can use them later\n# the file is too large for standard Git/GitHub\n# Git Large File Storage should be able to handle it\n# I'm using a simple hack so I don't have to set up Git LFS\n# I am saving these large file to a folder that is synced with Dropbox\n# adjust accordingly for your setup\n#filepath = fs::path(\"C:\",\"Data\",\"Dropbox\",\"datafiles\",\"longitudinalbayes\",\"ulamfits\", ext=\"Rds\")\nfilepath = fs::path(\"D:\",\"Dropbox\",\"datafiles\",\"longitudinalbayes\",\"ulamfits\", ext=\"Rds\")\nsaveRDS(fl,filepath)\n```\n:::\n\n\n# Explore model fits\n\nNow we are ready to explore the model fitting results. All fits are in the list called `fl`. For each model the actual fit is in `fit`, the model name in `model` and the run time in `runtime`. Note that the code chunks below come from [this second R script](ulamexploremodels.R), thus some things are repeated (e.g., loading of simulated data).[^fitdat]\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# loading list of previously saved fits.\n# useful if we don't want to re-fit\n# every time we want to explore the results.\n# since the file is too large for GitHub\n# it is stored in a local folder\n# adjust accordingly for your setup\nfilepath = fs::path(\"D:\",\"Dropbox\",\"datafiles\",\"longitudinalbayes\",\"ulamfits\", ext=\"Rds\")\nif (!fs::file_exists(filepath))\n{\n  filepath = fs::path(\"C:\",\"Data\",\"Dropbox\",\"datafiles\",\"longitudinalbayes\",\"ulamfits\", ext=\"Rds\")\n}\n\nfl <- readRDS(filepath)\n# also load data file used for fitting\nsimdatloc <- here::here('posts','2022-02-22-longitudinal-multilevel-bayes-1','simdat.Rds')\nsimdat <- readRDS(simdatloc)\n#pull our the data set we used for fitting\n#if you fit a different one of the simulated datasets, change accordingly\nfitdat <- simdat$m3\n#contains parameters used for fitting\npars <- simdat$m3pars\n```\n:::\n\n\n\n[^fitdat]: Note that I made the unfortunate choice of assigning the previously generated data to `fitdat`, which is not the same as the `fitdat` object I created in the _Data Loading_ section above. I just noticed that a good while after I had written it all. So I won't change it, but it would have been better if I had called it something different.\n\n\nYou should explore your model fits carefully. Look at the trace-plots or trank-plots with the `traceplot()` and `trankplot()` functions in `rethinking`. Make sure the chains are looking ok. You can also use the `summary` function to get some useful information on our model. To go further, you can call `stancode()` to get the actual Stan code for the model. This can be helpful to both learn Stan, and to check if the model translates into Stan code the way you expected it to.\n\nI'm showing a few of those explorations to illustrate what I mean. For any real fitting, it is important to carefully look at all the output and make sure everything worked as expected and makes sense.\n\nTo keep output manageable, I'm using model 2a here, which has no individual-level parameters, thus only a total of 5.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Model 2a summary\nshow(fl[[5]]$fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nHamiltonian Monte Carlo approximation\n15000 samples from 5 chains\n\nSampling durations (seconds):\n        warmup sample total\nchain:1  19.66   7.86 27.52\nchain:2  19.52  12.30 31.82\nchain:3  19.55  12.46 32.00\nchain:4  19.64   8.18 27.82\nchain:5  19.29  12.24 31.53\n\nFormula:\noutcome ~ dnorm(mu, sigma)\nmu <- exp(alpha) * log(time) - exp(beta) * time\nalpha <- a0 + a1 * dose_adj\nbeta <- b0 + b1 * dose_adj\na0 ~ dnorm(2, 0.1)\nb0 ~ dnorm(0.5, 0.1)\na1 ~ dnorm(0.3, 1)\nb1 ~ dnorm(-0.3, 1)\nsigma ~ cauchy(0, 1)\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Model 2a trace plots\n# for some reason didn't work on last compile\ntraceplot(fl[[5]]$fit, pars = c(\"a0\",\"b0\",\"a1\",\"b1\",\"sigma\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/traceplot-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Model 2a trank plots\nrethinking::trankplot(fl[[5]]$fit, pars = c(\"a0\",\"b0\",\"a1\",\"b1\",\"sigma\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/trankplot-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Model 2a pair plot\n# Correlation between posterior samples of parameters\nrethinking::pairs(fl[[5]]$fit, pars = c(\"a0\",\"b0\",\"a1\",\"b1\",\"sigma\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/pairplot-1.png){width=672}\n:::\n:::\n\n\nBased on these diagnostic outputs, it seems the chains converged well, at least for model 2a. One interesting feature is the strong correlation between the parameters $a_0$ and $b_0$ and also $a_1$ and $b_1$. Recall that $\\alpha$ determined the initial increase of the function, $\\beta$ the eventual decline. Both parameters determine the shape of the deterministic trajectory for all times, so large values for both can lead to somewhat similar results as small values for both. That is the reason for the correlations we see (and this is a different effect from the correlations we'll discuss below).\n\n## Models 1 and 3\n\nNow I'll look at bit more carefully at the different models. We start by comparing fits for models 1 and 3. Those two are essentially the same model, with the only difference being wider priors for the individual-level parameters in model 1. It is worth mentioning that when running the fitting routine, model 1 takes much longer to fit than model 3. With the settings I used, runtimes were 214 versus 53 minutes. The wide priors made the fitting efficiency poor. But let's see how it impacts the results.\n\nFirst, we explore priors and posteriors. They are easy to extract from the models using the `extract.prior()` and `extract.samples()` functions from `rethinking`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#get priors and posteriors for models 1 and 3\nm1prior <- extract.prior(fl[[1]]$fit, n = 1e4)\nm1post <- extract.samples(fl[[1]]$fit, n = 1e4)\n\nm3prior <- extract.prior(fl[[3]]$fit, n = 1e4)\nm3post <- extract.samples(fl[[3]]$fit, n = 1e4)\n```\n:::\n\n\nNow we can plot the distributions. Note that for the individual-level parameters $a_0$ and $b_0$, the plots show the distribution across all individuals. The dashed lines show the priors, the solid the posteriors. Black is model 1, blue is model 3.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#showing density plots for a0\nplot(density(m1prior$a0), xlim = c (-20,20), ylim = c(0,2), lty=2)\nlines(density(m1post$a0), lty=1)\nlines(density(m3prior$a0), col = \"blue\", lty=2)\nlines(density(m3post$a0), col = \"blue\", lty=1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_1_3_prior_plots-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#showing density plots for b0\nplot(density(m1prior$b0), xlim = c (-20,20), ylim = c(0,2), lty=2)\nlines(density(m1post$b0), lty=1)\nlines(density(m3prior$b0), col = \"blue\", lty=2)\nlines(density(m3post$b0), col = \"blue\", lty=1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_1_3_prior_plots-2.png){width=672}\n:::\n\n```{.r .cell-code}\n#showing density plots for a1\nplot(density(m1prior$a1), xlim = c (-3,3), ylim = c(0,2), lty=2)\nlines(density(m1post$a1), lty=1)\nlines(density(m3prior$a1), col = \"blue\", lty=2)\nlines(density(m3post$a1), col = \"blue\", lty=1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_1_3_prior_plots-3.png){width=672}\n:::\n\n```{.r .cell-code}\n#showing density plots for b1\nplot(density(m1prior$b1), xlim = c (-3,3), ylim = c(0,2), lty=2)\nlines(density(m1post$b1), lty=1)\nlines(density(m3prior$b1), col = \"blue\", lty=2)\nlines(density(m3post$b1), col = \"blue\", lty=1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_1_3_prior_plots-4.png){width=672}\n:::\n:::\n\n\nWe set up the models to have wider $a_0$ and $b_0$ priors for model 1, and the same priors for the $a_1$ and $b_1$ parameters. The dashed lines in the figures show that. Looking at the posteriors, we find that changing the priors has an impact, especially for $a_1$ and $b_1$. Not only does model 3 lead to more peaked posteriors, they are also not centered at the same values, especially for $b_1$. I don't think that's a good sign. We want the data to dominate the results, the priors should just be there to ensure the models explore the right parameter space efficiently and don't do anything crazy. The fact that the same model, started with different priors, leads to different posterior distributions is in my opinion concerning. It could be that with more sampling, the posteriors might get closer. Or it might suggest that we are overfitting and have non-identifiability problems here.\n\nOne way to check that further is to look at potential correlations between parameter posterior distributions, e.g., using a `pairs()` plot as shown above. Here are such plots for the parameters associated with $\\alpha$ for model 1. I only plot a few for each dose, otherwise the plots won't be legible inside this html document. But you can try for yourself, if you make the plot large enough you can fit them all. You can also make plots for model 3 and for the $b$ parameters, those look very similar.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# all \"a\" parameters - too big to show\n#pairs(fl[[1]]$fit, pars = c(\"a0\",\"a1\"))\n# a few parameters for each dose\n#low dose\nrethinking::pairs(fl[[1]]$fit, pars = c(\"a0[1]\",\"a0[2]\",\"a0[3]\",\"a0[4]\",\"a1\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_1_3_pair_plots-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#medium dose\nrethinking::pairs(fl[[1]]$fit, pars = c(\"a0[8]\",\"a0[9]\",\"a0[10]\",\"a0[11]\",\"a1\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_1_3_pair_plots-2.png){width=672}\n:::\n\n```{.r .cell-code}\n#high dose\nrethinking::pairs(fl[[1]]$fit, pars = c(\"a0[16]\",\"a0[17]\",\"a0[18]\",\"a0[19]\",\"a1\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_1_3_pair_plots-3.png){width=672}\n:::\n:::\n\n\nRecall that we set up the model such that dose is non-zero for low and high dose, while for the intermediate dose it drops out of the model. What seems to happen is that if the dose effect, i.e., $a_1$, is present, there is a strong correlation among that parameter and the individual-level parameters for that dose. That part makes some sense to me. Both $a_{0,i}$ or $a_1$ can change $\\alpha$ and thus the trajectory. If one is low, the other might be high, and the reverse, leading to similarly good fits.\n\nBecause every $a_{0,i}$ is correlated with $a_1$ in this way, this also leads to correlations among the $a_{0,i}$ values. I am surprised that this is an essentially perfect correlation. Maybe, if I thought about it harder and/or did the math, it would be clear that it needs to be that way. But I haven't yet, so for now I'm just taking it as given 😁. Overall, this is another sign of that we might be overfitting and have non-identifiability problems, i.e. combinations for different values of $a_{0,i}$ and $a_1$ can lead to more or less the same results (everything I write here of course also holds for the $b_{0,i}$ and $b_1$ parameters).\n\nLet's move on and now look at the posterior distributions in numerical form. For that, I use the `precis` function from `rethinking`. Instead of printing all the $N$ different values of $a_{0,i}$ and $b_{0,i}$, I compute their means. If you want to see them all, change to `depth=2` in the `precis` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Model 1\na0mean = mean(rethinking::precis(fl[[1]]$fit,depth=2,\"a0\")$mean)\nb0mean = mean(rethinking::precis(fl[[1]]$fit,depth=2,\"b0\")$mean)\nprint(rethinking::precis(fl[[1]]$fit,depth=1),digits = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n48 vector or matrix parameters hidden. Use depth=2 to show them.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       mean    sd  5.5% 94.5% n_eff Rhat4\na1     0.20 0.743 -1.00  1.38  1359     1\nb1    -0.19 0.744 -1.38  0.99  1120     1\nsigma  1.06 0.051  0.99  1.15 10765     1\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(c(a0mean,b0mean))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.963794 1.001530\n```\n\n\n:::\n\n```{.r .cell-code}\n# Model 3\na0mean = mean(rethinking::precis(fl[[3]]$fit,depth=2,\"a0\")$mean)\nb0mean = mean(rethinking::precis(fl[[3]]$fit,depth=2,\"b0\")$mean)\nprint(rethinking::precis(fl[[3]]$fit,depth=1),digits = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n48 vector or matrix parameters hidden. Use depth=2 to show them.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        mean    sd   5.5% 94.5% n_eff Rhat4\na1     0.142 0.109 -0.033 0.316  3298     1\nb1    -0.081 0.107 -0.253 0.092  2648     1\nsigma  1.061 0.051  0.983 1.146 13106     1\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(c(a0mean,b0mean))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.9755846 0.9807953\n```\n\n\n:::\n:::\n\n\nThe models seem to have converged ok, based on `Rhat` values of 1. Some parameters sampled better than others, as can be seen by the varying `n_eff` values. I used 5 chains of -1000 post-warmup samples for each chain, so the actual samples are -5000. If `n_eff` is lower than that, it means the sampling was not efficient, more means it worked very well (see e.g. Statistical Rethinking why it's possible to get more effective samples than actual samples.)\n\nWe find that estimates for $a_{0}$, $b_0$ and $\\sigma$ are similar, $a_1$ and $b_1$ differ more.\n\nAgain, note that the only thing we changed between models 1 and 3 are to make the priors for the $a_{0,i}$ and $b_{0,i}$ parameters tighter. It didn't seem to impact estimates for those parameters, but it did impact the estimates for the posterior distributions of parameters $a_1$ and $b_1$. The numbers are consistent with the posterior distribution figures above.\n\n## Comparing model estimates with the truth\n\nWe know the \"truth\" here, i.e., the actual values of the parameters which we used to created the simulated data. To generate the data, we used these parameter values: $\\sigma =$ 1, $\\mu_a =$ 3, $\\mu_b =$ 1, $a_1 =$ 0.1, $b_1 =$ -0.1. We also said that our main scientific question is if there is a dose effect, i.e. non-zero $a_1$ and $b_1$.\n\nThe models find estimates of $\\mu_a$, $\\mu_b$ and $\\sigma$ that are close to what we used. The estimates for $a_1$ and $b_1$ are not that great. That's especially true for model 1. With these models, we aren't able to convincingly recover the parameters used to generate the data. I'm not sure if increasing the sampling (longer or more chains) would help. Both models, especially model 1, already took quite a while to run. Thus I'm not too keen to try it with even more samples. As we'll see below, alternative models do better.\n\n## Models 2 and 2a\n\nNext, let's look at models 2 and 2a. The estimates should be similar since the two models are conceptually pretty much the same.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compare models 2 and 2a\n# first we compute the mean across individuals for model 2\na0mean = mean(rethinking::precis(fl[[2]]$fit,depth=2,\"a0\")$mean)\nb0mean = mean(rethinking::precis(fl[[2]]$fit,depth=2,\"b0\")$mean)\n\n#rest of model 2\nprint(rethinking::precis(fl[[2]]$fit,depth=1),digits = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n48 vector or matrix parameters hidden. Use depth=2 to show them.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        mean     sd  5.5%  94.5% n_eff Rhat4\nmu_a   2.982 0.0221  2.95  3.020    34   1.1\nmu_b   0.991 0.0191  0.96  1.023    30   1.2\na1     0.096 0.0097  0.08  0.110    87   1.0\nb1    -0.097 0.0080 -0.11 -0.085   165   1.0\nsigma  6.825 0.3217  6.35  7.334    50   1.1\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(c(a0mean,b0mean))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.9823079 0.9908912\n```\n\n\n:::\n\n```{.r .cell-code}\n#model 2a\nprint(rethinking::precis(fl[[5]]$fit,depth=1),digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        mean     sd  5.5%  94.5% n_eff Rhat4\na0     2.919 0.0237  2.88  2.955  5827     1\nb0     0.938 0.0208  0.90  0.970  5976     1\na1     0.108 0.0108  0.09  0.125  6119     1\nb1    -0.098 0.0096 -0.11 -0.083  6474     1\nsigma  7.007 0.3188  6.51  7.542  7481     1\n```\n\n\n:::\n:::\n\n\nThe first thing to note is that model 2 performs awfully, with `Rhat` values \\>1 and very low effective sample size `n_eff`. This indicates that this model doesn't work well for the data. Whenever you see diagnostics like that, you should not take the estimated values seriously. However, let's pretend for a moment that we can take them seriously. Here is what we find.\n\nFirst, both models produce similar estimates. Since model 2a is simpler and doesn't have that strange feature of us enforcing a very tight distribution for the $a_{0,i}$ and $b_{0,i}$ parameters, it actually samples much better, see the higher `n_eff` numbers. It also runs much faster, 1.6 minutes compared to 29 minutes for model 2.\n\nBoth models do a very poor job estimating $\\sigma$. That's because we don't allow the models to have the flexibility needed to fit the data, so it has to account for any variation between its estimated mean trajectory and the real data by making $\\sigma$ large.\n\nSince the models are more constrained compared to models 1 and 3, they produce estimates for $a_1$ and $b_1$ that are tighter. However, these estimates are over-confident. overall these models underfitting and are not good. We can for instance look at this using the `compare` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrethinking::compare(fl[[1]]$fit,fl[[3]]$fit,fl[[2]]$fit,fl[[5]]$fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 WAIC       SE       dWAIC        dSE    pWAIC        weight\nfl[[3]]$fit  832.3041 23.37289   0.0000000         NA 43.47114  5.465565e-01\nfl[[1]]$fit  832.6776 23.35188   0.3735338  0.3659438 43.55465  4.534435e-01\nfl[[2]]$fit 1779.6905 45.62606 947.3863988 46.8519545 11.11914 1.035839e-206\nfl[[5]]$fit 1788.5509 45.32354 956.2468479 47.0719252 10.52777 1.233873e-208\n```\n\n\n:::\n:::\n\n\nI'm not going to discuss things in detail (see [Statistical Rethinking](https://xcelab.net/rm/statistical-rethinking/)), but a lower WAIC means a model that fits best in the sense that it strikes a good balance between fitting the data while not overfitting. As you can see, models 1 and 3 perform very similarly and models 2 and 2a are much worse.\n\nThe larger WAIC indicates either strong overfitting or underfitting. In this case, it's underfitting. The models are not flexible enough to capture the individual-level variation. You'll see that clearly in the plots shown further below. If we did indeed not want to account for individual-level variation, we should go with a model that simply doesn't include it, i.e. model 2a. The contrived model 2 with very narrow priors is just a bad model, and I'm really only exploring it here for demonstration purposes.\n\n## Models 4 and 4a\n\nNow we get to the models we really care about. When I set up the models, I suggested that model 4 was similar to models 1-3, but with priors adaptively chosen. That didn't apply during data generation/simulation since in that step, we always need to manually choose values. But during the fitting/estimation, we should expect that model 4 chooses priors in a smart way, such that it is better than the models where we fixed the priors. Let's see what model 4 produces. We also look at model 4a, which is exactly the same model, just rewritten to potentially make the numerical fitting routine more efficient.\n\nLet's start with prior and posterior plots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#get priors and posteriors for models 4 and 4a\nm4prior <- rethinking::extract.prior(fl[[4]]$fit, n = 1e4)\nm4post <- rethinking::extract.samples(fl[[4]]$fit, n = 1e4)\n\nm4aprior <- rethinking::extract.prior(fl[[6]]$fit, n = 1e4)\nm4apost <- rethinking::extract.samples(fl[[6]]$fit, n = 1e4)\n```\n:::\n\n\nAs before, the dashed lines show the priors, the solid the posteriors. Black is model 4, blue is model 4a.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#showing density plots for a0\nplot(density(m4prior$mu_a), xlim = c (-10,10), ylim = c(0,2), lty=2)\nlines(density(m4post$mu_a), lty=1)\nlines(density(m4aprior$mu_a), col = \"blue\", lty=2)\nlines(density(m4apost$mu_a), col = \"blue\", lty=1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_4_4a_prior_plots-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#showing density plots for b0\nplot(density(m4prior$mu_b), xlim = c (-10,10), ylim = c(0,2), lty=2)\nlines(density(m4post$mu_b), lty=1)\nlines(density(m4aprior$mu_b), col = \"blue\", lty=2)\nlines(density(m4apost$mu_b), col = \"blue\", lty=1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_4_4a_prior_plots-2.png){width=672}\n:::\n\n```{.r .cell-code}\n#showing density plots for a1\nplot(density(m4prior$a1), xlim = c (-3,3), ylim = c(0,2), lty=2)\nlines(density(m4post$a1), lty=1)\nlines(density(m4aprior$a1), col = \"blue\", lty=2)\nlines(density(m4apost$a1), col = \"blue\", lty=1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_4_4a_prior_plots-3.png){width=672}\n:::\n\n```{.r .cell-code}\n#showing density plots for b1\nplot(density(m4prior$b1), xlim = c (-3,3), ylim = c(0,2), lty=2)\nlines(density(m4post$b1), lty=1)\nlines(density(m4aprior$b1), col = \"blue\", lty=2)\nlines(density(m4apost$b1), col = \"blue\", lty=1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_4_4a_prior_plots-4.png){width=672}\n:::\n:::\n\n\nAs you can see, up to numerical sampling variability, the results for models 4 and 4a are pretty much the same. That should be expected, since they are the same model, just reformulated for potential efficiency. Also, the posterior distributions are much narrower than the priors. I think that's a good sign as well, it indicates the data mostly informed the posterior distributions, the priors just helped to keep things efficient.\n\nWe can also explore pair plots again, showing them here for model 4.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# a few parameters for each dose\n#low dose\nrethinking::pairs(fl[[4]]$fit, pars = c(\"a0[1]\",\"a0[2]\",\"a0[3]\",\"a0[4]\",\"a1\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_4_4a_pair_plots-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#medium dose\nrethinking::pairs(fl[[4]]$fit, pars = c(\"a0[8]\",\"a0[9]\",\"a0[10]\",\"a0[11]\",\"a1\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_4_4a_pair_plots-2.png){width=672}\n:::\n\n```{.r .cell-code}\n#high dose\nrethinking::pairs(fl[[4]]$fit, pars = c(\"a0[16]\",\"a0[17]\",\"a0[18]\",\"a0[19]\",\"a1\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_4_4a_pair_plots-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# mean of a0 prior\nrethinking::pairs(fl[[4]]$fit, pars = c(\"mu_a\",\"mu_b\",\"a1\",\"b1\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_4_4a_pair_plots-4.png){width=672}\n:::\n\n```{.r .cell-code}\n#saving one plot so I can use as featured image\npng(filename = \"featured.png\", width = 6, height = 6, units = \"in\", res = 300)\nrethinking::pairs(fl[[4]]$fit, pars = c(\"mu_a\",\"mu_b\",\"a1\",\"b1\"))\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npng \n  2 \n```\n\n\n:::\n:::\n\n\nWe still see the same issue with correlations among the parameters for dose levels where $a_1$ is acting, though the correlations are not as extreme. They are also minor between the overall estimates for the mean of the $a_0$ and $b_0$ parameters and $a_1$ and $b_1$. I interpret this to mean that the adaptive sampling helped somewhat with the identifiability and overfitting problem, though it seems to not fully resolve it. The fact that we gave each individual their own $a_{0,i}$ and $b_{0,i}$ values allows those parameters to still \"absorb\" some of the dose-dependent signal in $a_1$ and $b_1$.\n\nWe can also again look at the numerical outputs from the `precis` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# model 4\nprint(rethinking::precis(fl[[4]]$fit,depth=1),digits = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n48 vector or matrix parameters hidden. Use depth=2 to show them.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          mean    sd   5.5%  94.5% n_eff Rhat4\nmu_a     2.987 0.020  2.956  3.018 16421     1\nmu_b     0.986 0.025  0.946  1.027 15631     1\nsigma_a  0.093 0.015  0.072  0.120 11785     1\nsigma_b  0.119 0.020  0.092  0.153 12447     1\na1       0.086 0.011  0.069  0.103  2057     1\nb1      -0.106 0.013 -0.126 -0.086  2380     1\nsigma    1.062 0.052  0.983  1.147 15009     1\n```\n\n\n:::\n\n```{.r .cell-code}\n# model 4a\nprint(precis(fl[[6]]$fit,depth=1),digits = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n48 vector or matrix parameters hidden. Use depth=2 to show them.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          mean    sd   5.5%  94.5% n_eff Rhat4\nmu_a     2.987 0.020  2.956  3.018  3254     1\nmu_b     0.986 0.025  0.947  1.024  3029     1\nsigma_a  0.093 0.016  0.071  0.120  3859     1\nsigma_b  0.119 0.020  0.092  0.154  3542     1\na1       0.086 0.010  0.069  0.102  3771     1\nb1      -0.106 0.013 -0.127 -0.085  3466     1\nsigma    1.063 0.052  0.984  1.148  9032     1\n```\n\n\n:::\n:::\n\n\nThe numerics confirm that the two models lead to essentially the same results. The values for `n_eff` differ between models, though neither model is consistently larger. This suggests that each model formulation had advantages in sampling for some of the parameters.\n\nIn terms of run times, there wasn't much difference, with 6 minutes for model 4 versus 9 minutes for model 4a (much better than models 1-3).\n\nIf we compare the parameter estimates with the true values and those found for models 1 and 3 above, we find that again the true $\\mu_a$, $\\mu_b$ and $\\sigma$ are estimated fairly well. Estimates for $a_1$ and $b_1$ are now also pretty good, and the credible intervals are less wide.\n\nNow let's briefly run the `compare` function too and include model 3 as well. In addition to using WAIC for comparison, I'm also including PSIS. Read about it in the Statistical Rethinking book. One advantage of PSIS is that it gives warnings if the estimates might not be reliable. You see that this happens here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrethinking::compare(fl[[3]]$fit,fl[[4]]$fit,fl[[6]]$fit, func = WAIC)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                WAIC       SE     dWAIC       dSE    pWAIC    weight\nfl[[4]]$fit 831.3515 23.37623 0.0000000        NA 42.67688 0.4263132\nfl[[6]]$fit 831.9958 23.38283 0.6442751 0.2846596 42.89029 0.3089059\nfl[[3]]$fit 832.3041 23.37289 0.9525426 2.6103005 43.47114 0.2647810\n```\n\n\n:::\n\n```{.r .cell-code}\nrethinking::compare(fl[[3]]$fit,fl[[4]]$fit,fl[[6]]$fit, func = PSIS)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome Pareto k values are high (>0.5). Set pointwise=TRUE to inspect individual points.\nSome Pareto k values are high (>0.5). Set pointwise=TRUE to inspect individual points.\nSome Pareto k values are high (>0.5). Set pointwise=TRUE to inspect individual points.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                PSIS       SE     dPSIS       dSE    pPSIS    weight\nfl[[4]]$fit 839.9925 24.32373 0.0000000        NA 46.99736 0.4045497\nfl[[6]]$fit 840.3464 24.31891 0.3539193 0.5155196 47.06559 0.3389372\nfl[[3]]$fit 840.9037 24.30523 0.9111897 2.7298493 47.77095 0.2565131\n```\n\n\n:::\n:::\n\n\nWe do find that model 4/4a performs a bit better, but not by much. Note that model 4/4a has more actual parameters, but the effective parameters (which is described by `pWAIC`) is a bit smaller.\n\nOverall, this suggests that the adaptive pooling approach helped to estimate results more precisely and efficiently and is the best of the models.\n\n## Model 5\n\nAs stated above, due to a typo in my code, the above models, including 4/4a, initially produced estimates for $a_1$ and $b_1$ that were not close to those (I thought I) used to generate the data. Based on the pair plots, I suspected non-identifiability issues and wanted to explore what would happen if I removed the dose.\n\nIf we now look at the pairs plots, maybe not surprisingly, the correlations between individual $a_0$ parameters are gone.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# a few parameters for each dose\n#low dose\nrethinking::pairs(fl[[7]]$fit, pars = c(\"a0[1]\",\"a0[2]\",\"a0[3]\",\"a0[4]\",\"a0[5]\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_5_pair_plots-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#medium dose\nrethinking::pairs(fl[[7]]$fit, pars = c(\"a0[8]\",\"a0[9]\",\"a0[10]\",\"a0[11]\",\"a0[12]\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_5_pair_plots-2.png){width=672}\n:::\n\n```{.r .cell-code}\n#high dose\nrethinking::pairs(fl[[7]]$fit, pars = c(\"a0[16]\",\"a0[17]\",\"a0[18]\",\"a0[19]\",\"a0[20]\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_5_pair_plots-3.png){width=672}\n:::\n:::\n\n\nThe model estimates the parameters reasonably well\n\n\n::: {.cell}\n\n```{.r .cell-code}\na0mean = mean(rethinking::precis(fl[[7]]$fit,depth=2,\"a0\")$mean)\nb0mean = mean(rethinking::precis(fl[[7]]$fit,depth=2,\"b0\")$mean)\nprint(rethinking::precis(fl[[7]]$fit,depth=1),digits = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n48 vector or matrix parameters hidden. Use depth=2 to show them.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      mean    sd 5.5% 94.5% n_eff Rhat4\nsigma  1.1 0.051 0.98   1.1 14886     1\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(c(a0mean,b0mean))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.0031082 0.9655898\n```\n\n\n:::\n:::\n\n\nIt doesn't seem quite as good as the previous models.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrethinking::compare(fl[[3]]$fit,fl[[4]]$fit,fl[[7]]$fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                WAIC       SE     dWAIC      dSE    pWAIC    weight\nfl[[4]]$fit 831.3515 23.37623 0.0000000       NA 42.67688 0.4462839\nfl[[3]]$fit 832.3041 23.37289 0.9525426 2.610301 43.47114 0.2771847\nfl[[7]]$fit 832.3088 23.33727 0.9572625 2.512509 43.43226 0.2765313\n```\n\n\n:::\n:::\n\n\n**And of course the main problem with this model: It can't answer any question about the role of dose, since we removed that component from the model!** So while ok to explore, scientifically not useful since it can't help us address the question we want to answer regarding the potential impact of dose.\n\n# Computing predictions\n\nLooking at parameters as we did so far is useful. But we also want to see how model predictions look. It is possible to have a model that predicts overall well, even if the parameter estimates are not right (of course, for real, non-simulated data, we generally don't know what the \"right\" values are). The opposite can't happen, if you have the right model and the parameter estimates are right, the predictions will be good. But again, you never know if you have the right model, i.e., the model that captures the process underlying the data. For any real data, you almost certainly do not. Thus you could get parameters that look \"right\" (e.g. narrow credible intervals) but the model is still not good. Our models 2 and 2a fall into that category, as you'll see below.\n\nThat is all to say, it's important to look at model predicted outcomes, not just the parameters. So let's plot the predictions implied by the fits for the models. The general strategy for that is to use the parameter estimates in the posterior, put them in the model, and compute the predictions. We are essentially going through the same steps we did to generate the data. Only now we start with the estimated values. While this could all be manually coded, we happily don't need to do so. The `rethinking` package has some helper functions for that (`sim` and `link`).\n\nThe code below produces predictions, both for the deterministic mean trajectory $\\mu$, and the actual outcome, $Y$, which has added variation due to $\\sigma$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#small data adjustment for plotting\nplotdat <- fitdat %>% data.frame()  %>%\n                      mutate(id = as.factor(id))  %>%\n                      mutate(dose = dose_cat)\n\n#this will contain all the predictions from the different models\nfitpred = vector(mode = \"list\", length = length(fl))\n\n# we are looping over each fitted model\nfor (n in 1:length(fl))\n{\n  #get current model\n  nowmodel = fl[[n]]$fit\n\n  #make new data for which we want predictions\n  #specifically, more time points so the curves are smoother\n  timevec = seq(from = 0.1, to = max(fitdat$time), length=100)\n  Nind = max(fitdat$id)\n  #new data used for predictions\n  preddat = data.frame( id = sort(rep(seq(1,Nind),length(timevec))),\n                        time = rep(timevec,Nind),\n                        dose_adj = 0\n  )\n  #add right dose information for each individual\n  for (k in 1:Nind)\n  {\n    #dose for a given individual\n    nowdose = unique(fitdat$dose_adj[fitdat$id == k])\n    nowdose_cat = unique(fitdat$dose_cat[fitdat$id == k])\n    #assign that dose\n    #the categorical values are just for plotting\n    preddat[(preddat$id == k),\"dose_adj\"] = nowdose\n    preddat[(preddat$id == k),\"dose_cat\"] = nowdose_cat\n  }\n\n  # pull out posterior samples for the parameters\n  post <- rethinking::extract.samples(nowmodel)\n\n  # estimate and CI for parameter variation\n  # this uses the link function from rethinking\n  # we ask for predictions for the new data generated above\n  linkmod <- rethinking::link(nowmodel, data = preddat)\n\n  #computing mean and various credibility intervals\n  #these choices are inspired by the Statistical Rethinking book\n  #and purposefully do not include 95%\n  #to minimize thoughts of statistical significance\n  #significance is not applicable here since we are doing bayesian fitting\n  modmean <- apply( linkmod$mu , 2 , mean )\n  modPI79 <- apply( linkmod$mu , 2 , PI , prob=0.79 )\n  modPI89 <- apply( linkmod$mu , 2 , PI , prob=0.89 )\n  modPI97 <- apply( linkmod$mu , 2 , PI , prob=0.97 )\n\n  # estimate and CI for prediction intervals\n  # this uses the sim function from rethinking\n  # the predictions factor in additional uncertainty around the mean (mu)\n  # as indicated by sigma\n  simmod <- rethinking::sim(nowmodel, data = preddat)\n\n  # mean and credible intervals for outcome predictions\n  # modmeansim should agree with above modmean values\n  modmeansim <- apply( simmod , 2 , mean )\n  modPIsim <- apply( simmod , 2 , PI , prob=0.89 )\n\n  #place all predictions into a data frame\n  #and store in a list for each model\n  fitpred[[n]] = data.frame(id = as.factor(preddat$id),\n                            dose = as.factor(preddat$dose_cat),\n                            predtime = preddat$time,\n                            Estimate = modmean,\n                            Q79lo = modPI79[1,], Q79hi = modPI79[2,],\n                            Q89lo = modPI89[1,], Q89hi = modPI89[2,],\n                            Q97lo = modPI97[1,], Q97hi = modPI97[2,],\n                            Qsimlo=modPIsim[1,], Qsimhi=modPIsim[2,]\n                            )\n} #end loop over all models\n```\n:::\n\n\n# Creating plots of the results\n\nNow that we got the predictions computed, we can plot them and compare to the data. It turns out that trying to plot all the different credible intervals makes the plot too busy, so I'm only showing a few. You can play around by turning the commented lines on.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#list for storing all plots\nplotlist = vector(mode = \"list\", length = length(fl))\n\n#looping over all models, creating and storing a plot for each\nfor (n in 1:length(fl))\n{\n  #adding titles to plots\n  title = fl[[n]]$model\n\n  plotlist[[n]] <- ggplot(data = fitpred[[n]], aes(x = predtime, y = Estimate, group = id, color = dose ) ) +\n    geom_line() +\n    #geom_ribbon( aes(x=time, ymin=Q79lo, ymax=Q79hi, fill = dose), alpha=0.6, show.legend = F) +\n    geom_ribbon(aes(x=predtime, ymin=Q89lo, ymax=Q89hi, fill = dose, color = NULL), alpha=0.3, show.legend = F) +\n    #geom_ribbon(aes(x=time, ymin=Q97lo, ymax=Q97hi, fill = dose), alpha=0.2, show.legend = F) +\n    geom_ribbon(aes(x=predtime, ymin=Qsimlo, ymax=Qsimhi, fill = dose, color = NULL), alpha=0.1, show.legend = F) +\n    geom_point(data = plotdat, aes(x = time, y = outcome, group = id, color = dose), shape = 1, size = 2, stroke = 2) +\n    scale_y_continuous(limits = c(-30,50)) +\n    labs(y = \"Virus load\",\n         x = \"days post infection\") +\n    theme_minimal() +\n    ggtitle(title)\n}\n```\n:::\n\n\n# Showing the plots\n\nHere are the plots for all models we considered. I'm plotting them in the order I discussed the models above, so the ones we compared above are shown right below each other.\n\nIt's a bit hard to see, but each plot contains for each individual the data as symbols, the estimated mean as line, and the 89% credible interval and prediction interval as shaded areas. The prediction interval is the light shaded area. If you enlarge the images, you should be able to see it.\n\n## Models 1 and 3\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(plotlist[[1]])\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_1_3_plots-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(plotlist[[3]])\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_1_3_plots-2.png){width=672}\n:::\n:::\n\n\nDespite differences in estimates for the dose related parameters, the predicted outcomes of the models are very similar. In fact, it's hard to tell any difference by just looking at the plots (but they are slightly different, I checked). Thus, despite the inability of these models to provide precises estimates of all the parameter values, the predictions/outcomes are fine, they fit the data well.\n\n## Models 2 and 2a\n\nFor models 2 and 2a, recall that the only variation is for dose, we didn't allow variation among individuals. That's reflected in the plots. The credible intervals based on parameters are tight, but because the variability, $\\sigma$, had to account for all the differences, the prediction intervals are very wide.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(plotlist[[2]])\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_2_2a_plots-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(plotlist[[5]])\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_2_2a_plots-2.png){width=672}\n:::\n:::\n\n\n## Models 4 and 4a\n\nThese models look good again, and very similar to models 1 and 3.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(plotlist[[4]])\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_4_4a_plots-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(plotlist[[6]])\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_4_4a_plots-2.png){width=672}\n:::\n:::\n\n\n## Model 5\n\nThe model fits look fine, suggesting that one parameter for each individual is enough to capture the data. That's not surprising. However, this of course does not allow us to ask and answer any scientific questions about the role of dose.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(plotlist[[7]])\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mod_5_plots-1.png){width=672}\n:::\n:::\n\n\nSo overall, the figures make sense It seems that if we want to do prediction, all models that include individual variability are fine, models 2/2a are not great. If we wanted to estimate the model parameters, specifically $a_1$ and $b_1$, models 1 and 3 and of course 5 don't work. In that case, model 2/2a works ok. I consider model 4/4a the best one overall.\n\nFor another example and more discussion of estimation versus prediction, see e.g. Section 6.1. in *Statistical Rethinking*, as well as 9.5.4 (all referring to the 2nd edition of the book).\n\n# Summary and continuation\n\nTo sum it up, we fit several models to the simulated time-series data to explore how different model formulations might or might not impact results. For this post, I used the - very nice! - `rethinking` package. In the next post, I'll repeat the fitting again, now using `brms`. Since `brms` is very widely used and has some capabilities that go beyond what `rethinking` can do, I think it's worth [reading the next post](/posts/longitudinal-multilevel-bayesian-analysis-3/).\n\nIf you don't care about `brms`, you can hop to [this post](/posts/longitudinal-multilevel-bayesian-analysis-4/), where I discuss a few further topics and variations. Any fitting done in that post is with `ulam`/`rethinking`, so you don't need to look at the `brms` post, but I still suggest you do 😁.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}