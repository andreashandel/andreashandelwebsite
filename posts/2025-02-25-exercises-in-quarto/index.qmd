---
title: Implementing quizzes and exercises for Quarto websites    
description: Some notes on implementing simple quizzes on Quarto based (teaching) websites.
author: Andreas Handel
date: 2025-02-25
date-modified: 2025-02-25
aliases: 
  - ../quizzes-exercises-quarto/
categories: 
  - Quarto
  - Website
  - CSS
  - Teaching
image: "featured.png"
image-alt: "A screenshot of a quiz question"
execute:
  echo: false
engine: knitr
---


# Motivation

I am currently using [Quarto](https://quarto.org) for my course websites. Sometimes, it's useful to have interactive exercises. I was looking around to find something that fits my needs. Ideally, what I want is: 

- Programming language idependent
- Easy to set up and implement/use
- No need to run server-side software
- Well maintained
- Definitely support multiple choice questions, if also supports coding exercises/questions, even better.


# Tldr

Based on what I was able to find, the most suitable option for my purpose seems to be the [`exams`]() (and add-on `exams `) package. It can't do coding exercises, so if a future version of some of the webR implementations make multiple-choice questions easy to implement, I would prefer to switch to an 'all-in-one'.
For the time being, I figured I write down what I explored. Mostly for my future self who won't be able to remember any of that in a few weeks. And maybe others find it useful too.


# Previously

## Shiny/learnr

In the old days, there was nothing much for interactive web-based quizzes/exercises (in the `R` space). Then came Shiny, which allowed interactive websites. Building on top of that, along came the [learnr R package](https://rstudio.github.io/learnr/index.html) which allows nice implementation of exercises and quizzes on websites. 

A colleague and I developed a set of learnr/Shiny tutorials for our interactive [Introductory Biostatistics Labs in R](https://andreashandel.github.io/iblir/). We currently still use these labs as part of a course we regulary teach. (You can see the labs in action [here](https://shiny.ovpr.uga.edu/iblir/).)

This setup works overall well. The main drawback is that one needs to deploy the content to a Shiny server. That can be costly and/or somewhat tricky to administer. 

Another current disadvantage with `learnr` is that development has slowed down (ceased?). The GitHub page shows open pull requests from 5 years ago, over 100 open issues, and only 3 commits in 2024. Posit (formerly RStudio) folks, who were the main developers of `learnr`, seem to have moved on to newer things (see below.)



## Other options

The R package [webexercises](https://psyteachr.github.io/webexercises/) provides some simple functionality to embed quizzes in websites. It can't do coding exercises, but is nice for simple multi-choice/true-false and similar questions. The main potential drawbacks are that questions need to be written as R code, and that package development and maitenance doesn't seem very active. The last commit was about 2 years ago, and there are several open GitHub PRs and Issues. If something were to break/not work (I've noticed occasional iffy behaviour in my explorations), it's unclear if things would be addressed by the maintainer[^1]. 

[^1]: I'm certainly not here to criticize any volunteer work, I know from my own R package development that things like software maintenance are rarely "rewarded" bye one's main employer and therefore often need to be low priority. I'm just making a comment as a user who is thinkinng about robustness/sustainability for my courses).

Something similar to `webexercises` is the [`checkdown R package`](https://github.com/agricolamz/checkdown). It has very similar functionality, and I have exactly the same robustness/maintenance concerns for this package that I have for `webexercises`. The prolific (and way more technically savy than me) [Andrew Heiss](https://www.andrewheiss.com/) uses `checkdown` for his [R Studio Primer port](https://r-primers.andrewheiss.com/about.html#quizzes). That makes me a bit confident that if I were to use this package and something went wrong, I could ask him for a hack/fix üòÅ.   

Another exercise/quiz/exam focused package that has been around for a while is [`exams`](https://www.r-exams.org/). They have a new package called [`exams2forms`](https://www.r-exams.org/tutorials/exams2forms/) which allows integration of questions into websites. The whole package seems fairly full-featured and initially a bit intimidating, but after reading the tutorials, I realized it's not that difficult. I experimented with it, and it seems to work well. The developers/maintainers are highly active, so my concerns regarding future support are minimal. I'm giving a quick worked example using `exams` below.


# New Stuff

Recent developments in the R/Quarto space are of course continued improvement of Quarto itself, and the webR framework, which allows running R code in the browser. There are several options for potential exercise/quiz implementations.


## Quarto based

Quarto allows individuals to write extensions that supply additional functionality. I'm aware of two that implement some form of quiz/exercise functionality. The first, [quarto-quiz](https://github.com/parmsam/quarto-quiz) only works for the `revealJS` format, so is not suitable for html-based websites. 

The second, [naquiz](https://github.com/nareal/naquiz) can be included within html websites. Possible advantages of this package is that the quizzes are programming-language agnostic, and implementing simple questions is rather easy. The main hesitation I have is again robustness/maintenance. The package has a single developer/maintainer, the extension hasn‚Äôt been updated in over 2 years. There‚Äôs an open GitHub issue filed in Sept 2024 with what seems like a somewhat serious and simple to fix bug that has not been addressed. This makes me wonder as a user how likely any issues I might run into would be addressed.


## webR based

There are several new options that make use of the new webR framework to allow one to run interactive coding exercises without needing a Shiny server on the backend.

[`quarto-webr`](https://quarto-webr.thecoatlessprofessor.com/) is one such option, [`quarto-live`](https://github.com/r-wasm/quarto-live) is an alternative, very similar option. 

The potential drawbacks (for me) with all of these is that they focus on interactive coding exercises, and don't have easy options for simple multiple choice or true-false questions.


The problem with shinylive or  is that there‚Äôs no ready to use simple ‚Äòmultiple choice‚Äô question setup. It‚Äôs meant for  


Shinylive allows having shiny apps being executed in the browser so one doesn‚Äôt need to have a server running. This uses webR. https://posit-dev.github.io/r-shinylive/ 
Quarto-live is similar to shinylive https://github.com/r-wasm/quarto-live It allows browser-side code execution in quarto documents.
Another option: https://www.r-exams.org/



## Summary

To sum it all up:

There are a number of different options with different strengths and weaknesses. None quite fully fit my needs.




## A brief `exams` example

**Step 1:** [Install the packages](https://www.r-exams.org/tutorials/installation/) and any other tools. Then read the [First Steps Tutorial](https://www.r-exams.org/tutorials/first_steps/) for the main `exams` package and the [`exams2forms` tutorial](https://www.r-exams.org/tutorials/exams2forms/).


**Step 2:** Write up each question as an `Rmd` file following their provided templates/examples. Here's a simple example:


`
Question
========
Which of these is not a component of a [READy workflow](https://andreashandel.github.io/MADAcourse/content/module-ready-workflow/ready-overview.html)?


Answerlist
----------
* Reproducible
* Efficient
* Analytical
* Documented


Solution
========
READy stands for "Reproducible, efficient, automated, and documented" 

Answerlist
----------
* False
* False
* True
* False


Meta-information
================
exname: test quiz
extype: schoice
exsolution: 0010
`

Step 3: Load that question inside your Quarto document with code like this:


```{r quiz, echo = TRUE, message = FALSE, results = "asis"}
library("exams2forms")
exams2form(file = "test-quiz.Rmd")
```

Or do an inline question with code like this

Which of these is the most fun sport?
```{r simple-quiz, echo = TRUE, results = "asis"} 
exams2forms::forms_schoice(c("Cricket", "Soccer", "Mountain Biking", "Synchronized Swimming"), c(FALSE, FALSE, TRUE, FALSE), display = "dropdown")
```


**Step 4:** Add their css and js files to Quarto as described in the tutorial.













# Further resources

- The [quarto-webr]() framework has a nice list of examples of folks using that setup for teaching.





# Acknowledgments

I want to acknowledge all those folks generating the tools I describe above - even if a this point, none is exactly what I'm looking for üòÅ. 



