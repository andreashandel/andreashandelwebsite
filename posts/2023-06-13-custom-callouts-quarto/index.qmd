---
title: How to make custom callouts for Quarto    
description: A brief tutorial on implementing callout style layouts in Quarto for those with rudimentary CSS/HTML skills like myself.
author: Andreas Handel
date: 2023-06-13
date-modified: 2025-03-05
aliases: 
  - ../custom-callouts-quarto/
categories: 
  - Quarto
  - Website
  - CSS
image: "goal.png"
image-alt: "An icon representing a goal"
execute:
  echo: false
engine: knitr
---

# Update 2025-03-05

I wrote this post about 2 years ago. I since had forgotton about it. I recently needed to revisit the topic, re-discovered my own post, and realized that what I was writing here, namely that I was making custom callouts for Quarto, is not quite correct. I'm just defining styling for new divs that look somewhat like Quarto callouts, but I'm not using the "callout machinery". For my updated thoughts and notes, [see this new blog post](https://www.andreashandel.com/posts/2025-03-05-custom-quarto-divs/).


# Motivation

I am currently using [Quarto](https://quarto.org) for most of my writing. I write papers, make presentations and create websites using it.
For a recent website project, I wanted [callouts similar to the ones that come with Quarto](https://quarto.org/docs/authoring/callouts.html), but ones that I can customize. Given my limited web coding (HTML/CSS/Javascript/etc.) experience, it took me a bit to figure it out and I had to cobble it together from different sources. I figured others might be interested, so here's a brief write up.

# Introduction

If you are not familiar with Quarto callouts, take a look [at this explanation](https://quarto.org/docs/authoring/callouts.html). It's a nice way to highlight something in text. For instance this bit of code produces one of the pre-built callouts that come with Quarto.   


````markdown
::: {.callout-tip}
## Tip with Title
This is an example of a callout with a title.
:::
````


::: {.callout-tip}
## Tip with Title
This is an example of a callout with a title.
:::


As the [Quarto website explains](https://quarto.org/docs/authoring/callouts.html), some customizations are possible, but it's limited. I wanted my own boxes with colors and text and icons of my choosing, and that is not - as the time of this writing - a built-in possibility. So I tried to figure out how to do it myself.


# Looking for examples

What I wanted was my own callout box, with a look (colors, icon, etc.) that I can adjust. The closest information I could find online was [this Stackoverflow question/answer](https://stackoverflow.com/questions/74647399/define-a-new-callout-in-quarto) but unfortunately I couldn't quite get it to work (and I don't know why).

I remembered [this post](https://desiree.rbind.io/blog/making-tip-boxes-with-bookdown-and-rmarkdown/) from Desirée De Leon, and it gave me the overall idea on how to do it, but I wanted a look that was similar to the Quarto callouts.

Then I found [this resource](https://www.w3schools.com/howto/howto_js_callout.asp) which shows how to make a callout box. It didn't have quite the look I wanted, and had some features I didn't like/want, such as being able to click it away and placing it in the bottom corner. But between this example and the example from Desirée`s post, it gave me enough to work with.


# Making my own

## The setup

Quarto uses either CSS or SCSS files for styling. CSS files do the heavy lifting for styling of websites. SCSS files are basically extensions that allow for additional features. [This presentation](https://ucsb-meds.github.io/customizing-quarto-websites/) by Sam Csik gives a nice non-technical introduction for CSS/SCSS styling with Quarto. The details aren't too important and I certainly don't fully understand CSS/SCSS. For our purpose, we could use CSS but since SCSS seems to be more flexible, and we can stick all CSS into that file, we might as well use that format. Start by creating an empty SCSS file (or find some template online). Let's assume it's called `customstyle.scss` and you placed it in the same folder as your `_quarto.yml` file. Then add this SCSS to `_quarto.yml`, e.g. to look like this:

````markdown
format:
  html:
    theme: 
      light: [matria,customstyle.scss]
      dark: [slate,customstyle.scss]

````

See [here](https://quarto.org/docs/output-formats/html-themes.html) for some more information.


## The styling

Now comes the main part, adding instructions to the SCSS file to get the look we want. I'm basically combining bits and pieces from the sources I linked above. All the code below goes into the `/*-- scss:rules --*/` section of your SCSS file. I'm naming my callout `goals` but you can use any name you want.

First we specify the overall box with a rounded border.

````markdown
.goals {
  margin: 1em 0;
  border: 2px solid gray;
  border-left: 10px solid teal; 
  border-radius: 10px;
}
````


The next code block sets up the header/title section. 

Note that I needed to round the background box in the top right corner so it has the same shape as the overall box/border defined above.

I'm also including a small icon here, following the blog post instructions by Desirée mentioned above. I got the icon [from here](https://uxwing.com/). Depending on where you place the icon, you will have to adjust the file path inside the `url()` command.



````markdown
.goals-header {
  margin-left: 0em;
  padding-left:  60px;
  padding-top:  5px;
  padding-bottom: 0.1em;
  color: black;
  background-color: rgb(123, 173, 173);
  border-top-right-radius: 10px;
  font-size: 1em;
  font-weight: bold;
  background-size: 40px;
  background-repeat: no-repeat;
  background-position: 15px center;
  background-image: url("goal.png");
}
````

And the last bit of code styles the main text portion of the callout.

````markdown
.goals-container {
  padding-top: 5px;
  padding-left: 10px;
  color: black;
  background-color: white;
  border-bottom-right-radius: 10px;
}
````





## Using your new callout

This is fairly easy, you are using the same fenced div notation as for the built-in Quarto callouts shown above. 
The only additional part is that you need to nest them like so:

````markdown
:::{.goals}
::::{.goals-header}
Learning Goals
::::
::::{.goals-container}
* Know how to make your own callouts.
* Be able to mess with some SCSS/CSS styling.
::::
:::
````

The nesting is accomplished by giving each level up/down one more/fewer `:`. 

This will produce the following.


:::{.goals}
::::{.goals-header}
Learning Goals
::::
::::{.goals-container}
* Know how to make your own callouts.
* Be able to mess with some SCSS/CSS styling.
::::
:::

I'm quite happy with this. It looks fairly similar to the Quarto built-in examples. It could use a bit more refinement and adjustment, but I think the overall setup is clear enough that you can take it from here `r emoji::emoji("grin")`.


## Summary

To sum it all up, here is what you need to do:

1. If needed, create a new SCSS (or CSS) file and add the SCSS/CSS code chunks above to it.
2. Edit your `_quarto.yml` file to include your new SCSS file.
3. Write `.qmd` documents using the fenced div (`:::{}`) approach shown above.
4. Keep adding as many new styles as you want, and adjust them to however style you like.




# Further resources

Lots of folks create fancy looking websites and other Quarto documents. I like looking at [Andrew Heiss](https://www.andrewheiss.com/) websites for inspiration. He has a nice personal website and also great course websites, all made in Quarto and all out in public. For instance here is the [Github repo of his personal website](https://github.com/andrewheiss/ath-quarto) and he has lots of styling going on in his SCSS file inside the `html` folder. In fact, I checked his materials first to see if he has an example of what I'm looking for, but I didn't see that one.

CSS powers the styling of the internet, so there are tons of resources out there telling you all the things you can edit. The resource I use above, [W3 Schools](https://www.w3schools.com/css/) is useful, but there are many other good resources - Google is your friend. Also, editors like VS Code, which I use to edit these files, have auto-complete, so you can start with say `border` and it will tell you all the options.



# Acknowledgments

As always, I rarely come up with completely new stuff, instead I cobble it together from other resources. The sources I cite above should obviously receive all the credit for the underlying ideas and explanations. 

