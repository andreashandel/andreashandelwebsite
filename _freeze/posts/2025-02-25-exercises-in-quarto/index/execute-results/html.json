{
  "hash": "b7dacb2ec7bcb3d710020a012e277442",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Quizzes and exercises for Quarto websites    \ndescription: Some notes on implementing simple quizzes and exercises within Quarto based (teaching) websites.\nauthor: Andreas Handel\ndate: 2025-02-25\ndate-modified: 2025-02-25\naliases: \n  - ../quizzes-exercises-quarto/\ncategories: \n  - Quarto\n  - Website\n  - CSS\n  - Teaching\nimage: \"featured.png\"\nimage-alt: \"A screenshot of a quiz question\"\nexecute:\n  echo: false\nengine: knitr\n---\n\n\n\n\n\n# Motivation\n\nI am currently using [Quarto](https://quarto.org) for my [course websites](https://www.andreashandel.com/projects.html#category=Course). Sometimes, it's useful to include interactive exercises or quizzes. I was looking around to find something that fits my needs. Ideally, what I want is: \n\n- Easy to set up and implement/use\n- No need to run server-side software\n- Well maintained\n- Programming language idependent\n- Definitely support multiple choice questions, if also supports coding exercises/questions, even better.\n\nI figured I write down what I explored. Mostly for my future self who won't be able to remember any of that in a few weeks [^1]. And maybe others find it useful too.\n\n[^1]: Just the other day I wanted to know how to customize Quarto callouts and a quick Google search turned up a [helpful blogpost](https://www.andreashandel.com/posts/2023-06-13-custom-callouts-quarto/) that seemed vaguely familiar üòÇ. Turns out I had the same question and figured it out about 2 years ago - I'm getting old üôÑ.\n\n\n\n# TLDR\n\nBased on what I was able to find, the most suitable option for my purpose seems to be the [`exams`](https://www.r-exams.org/) R package, and its new sister package [`exams2forms`](https://www.r-exams.org/tutorials/exams2forms/) which allows integration of questions into websites.\n\nThose packages can't do coding exercises, so if a future version of some of the `webR` framework based implementations described below make multiple-choice questions easy to implement, I would prefer to use them.\n\n\n\n\n# Previously\n\n## Shiny/learnr\n\nIn the old days, there was nothing much for interactive web-based quizzes/exercises (in the R language space). Then came `Shiny`, which allowed interactive websites. Building on top of that, along came the [`learnr` R package](https://rstudio.github.io/learnr/index.html) which allows nice implementation of exercises and quizzes on websites. \n\nA colleague and I developed a set of `learnr`/`Shiny` tutorials for our interactive [Introductory Biostatistics Labs in R](https://andreashandel.github.io/iblir/). We currently still use these labs as part of a course we regulary teach. (You can see the labs in action [here](https://shiny.ovpr.uga.edu/iblir/).)\n\nThis setup works overall well. The main drawback is that one needs to deploy the content to a `Shiny` server. That can be costly and/or somewhat tricky to administer. Another current disadvantage with `learnr` is that development has slowed down (ceased?). The GitHub page shows open pull requests from 5 years ago, over 100 open issues, and only 3 commits in 2024. Posit (formerly RStudio) folks, who were the main developers of `learnr`, seem to have moved on to newer things (see below.)\n\n\n\n## Other options\n\nThe R package [`webexercises`](https://psyteachr.github.io/webexercises/) provides some simple functionality to embed quizzes in websites. It can't do coding exercises, but is nice for simple multi-choice/true-false and similar questions. The main potential drawbacks are that questions need to be written as R code, and that package development and maitenance doesn't seem very active. The last commit was about 2 years ago, and there are several open GitHub PRs and Issues. If something were to break/not work (I've noticed occasional iffy behaviour in my explorations), it's unclear if things would be addressed by the maintainer[^2]. \n\n[^2]: I'm certainly not here to criticize any volunteer software development/maintenance work! I know from my own R package development that things like software maintenance are rarely rewarded bye one's main employer and therefore often need to be low priority. I'm just making a comment as a user who is thinkinng about robustness/sustainability for my courses.\n\nSomething similar to `webexercises` is the [`checkdown`](https://github.com/agricolamz/checkdown) R package. It has very similar functionality, and I have exactly the same robustness/maintenance concerns for this package that I have for `webexercises`. The prolific (and way more technically savy than me) [Andrew Heiss](https://www.andrewheiss.com/) uses `checkdown` for his [R Studio Primer port](https://r-primers.andrewheiss.com/about.html#quizzes). That makes me a bit confident that if I were to use this package and something went wrong, I could ask him for a hack/fix üòÅ.   \n\nAnother exercise/quiz/exam focused package that has been around for a while is [`exams`](https://www.r-exams.org/). They have a new package called [`exams2forms`](https://www.r-exams.org/tutorials/exams2forms/) which allows integration of questions into websites. The whole package seems fairly full-featured and initially a bit intimidating, but after reading the tutorials, I realized it's not that difficult. I experimented with it, and it seems to work well. The developers/maintainers are highly active, so my concerns regarding future support are minimal. I'm giving a quick worked example using `exams` below.\n\n\n\n\n\n# New Stuff\n\nRecent developments in the R/Quarto space are of course continued improvement of Quarto itself, and the webR framework, which allows running R code in the browser. There are several options for potential exercise/quiz implementations.\n\n\n## Quarto based\n\nQuarto allows individuals to write extensions that supply additional functionality. I'm aware of two that implement some form of quiz/exercise functionality. The first, [`quarto-quiz`](https://github.com/parmsam/quarto-quiz) only works for the `revealJS` format, so is not suitable for html-based websites. \n\nThe second, [`naquiz`](https://github.com/nareal/naquiz) can be included within html websites. Possible advantages of this package is that the quizzes are programming-language agnostic, and implementing simple questions is rather easy. The main hesitation I have is again robustness/maintenance. The package has a single developer/maintainer, the extension hasn‚Äôt been updated in over 2 years. There‚Äôs an open GitHub issue filed in Sept 2024 with what seems like a somewhat serious and simple to fix bug that has not been addressed. This makes me wonder as a user how likely any issues I might run into would be addressed.\n\n\n## webR based\n\nThere are several new options that make use of the new [`webR` framework](https://docs.r-wasm.org/webr/latest/) to allow one to run interactive coding exercises inside Quarto documents/websites, without needing a Shiny server on the backend.\n\n[`quarto-webr`](https://quarto-webr.thecoatlessprofessor.com/) is one such option, [`quarto-live`](https://github.com/r-wasm/quarto-live) is an alternative, very similar option. As far as I can tell these two options provide roughly similar functionality[^3]. They are meant to allow execution of code - and exercises based on code - being run in the browser without the need for an R/Shiny server. A related package, [`shinylive`](https://posit-dev.github.io/r-shinylive/), provides somwhat similar functionality (R/Shiny without a server) but is not as Quarto focused.\n\n[^3]: Without having actually tried each, that's just my impression after reading through some of the documentation.\n  \n\n\nThe main drawback (for me) is that these packages do not - as far as I can tell - provide any user-friendly and simple options to implement non-coding exercises, such as simple multiple choice or true-false questions. Another, minor inconvenience is that they are R code based, but as long as the code can be hidden from the user, I'd be ok with that.\n\nIf someone were to implement an easy way to write non-coding quiz questions using either of those approaches, it would likely be ideal for me since then I could use the same approach for classes where I want to show/do coding exercises and for those where I only want to have interactive quiz functionality. I guess I basically want a re-implementation of `learnr` using the `webR` framework to allow deployment on static websites. Alas, that does not currently seem to exist[^4].\n\n[^4]: It [seems to be possible](https://yabellini.netlify.app/blog/2024-09-29-quarto_live_quiz/) to do it, but that approach looks too involved and complex to me.\n\n \n\n\n\n# Summary\n\nIn conclusion, based on what I found online, I can't exactly have what I want (`learnr` functionality, such as easy creation of simple quizzes, in a `webR` setting). Since my immediate needs are not for coding exercises but quizzes, I plan to use `exams` and `exams2forms`.\n\nIn the meantime, I'll keep checking every so often, maybe someone will develop what I'm looking for, a full-featured exercise/quiz system based on R/Shiny in the browser (and maybe with the option to toggle between languages, personally I would like to see Julia support the most, I care less about Python). \n\n\n# Further resources\n\n- The `quarto-webr` website has [a nice list of examples](https://quarto-webr.thecoatlessprofessor.com/qwebr-community-examples.html) of folks using that setup for teaching.\n\n\n# Acknowledgments\n\nI want to acknowledge all those folks generating the tools I describe above - even if a this point, none areexactly doing what I'm looking for üòÅ. \n\n\n\n# A brief `exams` example\n\nThe following shows a simple example of making and embedding questions into a Quarto website using `exams` and `exams2forms`.\n\n**Step 1:** [Install the packages](https://www.r-exams.org/tutorials/installation/) and any other tools. Then read the [First Steps Tutorial](https://www.r-exams.org/tutorials/first_steps/) for the main `exams` package and the [`exams2forms` tutorial](https://www.r-exams.org/tutorials/exams2forms/).\n\n\n**Step 2:** Write up each question as an `Rmd` file following their provided templates/examples. Here's a simple example:\n\n\n```{include=\"test-quiz.Rmd\"}\n```\n\n\n\nStep 3: Load that question inside your Quarto document with code like this:\n\n\n\n\n\n::: {.webex-question}\n::: {.webex-check .webex-box}\n\nWhich of these is NOT a component of a READy workflow?\n(See here: https://andreashandel.github.io/MADAcourse/content/module-ready-workflow/ready-overview.html)\n\n\n\n<div class='webex-radiogroup' id='radio_group_tnxpxagyzi'><label><input type='radio' autocomplete='off' name='radio_group_tnxpxagyzi' value=''></input><span>Reproducible</span></label><label><input type='radio' autocomplete='off' name='radio_group_tnxpxagyzi' value=''></input><span>Efficient</span></label><label><input type='radio' autocomplete='off' name='radio_group_tnxpxagyzi' value='answer'></input><span>Analytical</span></label><label><input type='radio' autocomplete='off' name='radio_group_tnxpxagyzi' value=''></input><span>Documented</span></label></div>\n\n\n:::\n::: {.webex-solution}\n\nREADy stands for: Reproducible, efficient, automated, and documented \n\n\n\n* False\n* False\n* True\n* False\n\n:::\n\n:::\n\n\n\n\n\nOr do an inline question with code like this:\n\nWhich of these is the most fun sport?\n<select class='webex-select'><option value='blank'></option><option value=''>Cricket</option><option value=''>Soccer</option><option value='answer'>Mountain Biking</option><option value=''>Synchronized Swimming</option></select>\n\nWhich is created by this bit of code:\n\n\n\n\n\n```{.default}\n`r exams2forms::forms_schoice(c(\"Cricket\", \"Soccer\", \"Mountain Biking\", \"Synchronized Swimming\"), c(FALSE, FALSE, TRUE, FALSE), display = \"dropdown\")`\n```\n\n\n\n\n\n**Step 4:** Add their css and js files to Quarto as described in the tutorial, then re-render everything.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}